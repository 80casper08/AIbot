import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Text
from aiogram.utils import executor

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–¢–£–¢"

bot = Bot(token=TOKEN)
dp = Dispatcher()

SP_QUESTIONS = [
    {
        "question": "–•—Ç–æ –º–∞—î –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ HR Lead –ª–æ–∫–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–≥—É–ª –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞?",
        "options": ["–ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∫–µ—Ä—ñ–≤–Ω–∏–∫", "Head of Department", "HR Documentation Specialist"],
        "answer": "–ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π –∫–µ—Ä—ñ–≤–Ω–∏–∫"
    },
    {
        "question": "–Ø–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–∫–ª–∞–¥–∞—î –∫–µ—Ä—ñ–≤–Ω–∏–∫, —è–∫—â–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –Ω–µ –≤–∏–π—à–æ–≤ –Ω–∞ —Ä–æ–±–æ—Ç—É —ñ –≤—ñ–¥–º–æ–≤–ª—è—î—Ç—å—Å—è –ø–∏—Å–∞—Ç–∏ –ø–æ—è—Å–Ω—é–≤–∞–ª—å–Ω—É?",
        "options": ["–ê–∫—Ç –≤—ñ–¥–º–æ–≤–∏ –Ω–∞–¥–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è", "–î–æ–ø–æ–≤—ñ–¥–Ω–∞ –∑–∞–ø–∏—Å–∫–∞", "–¢–∞–±–µ–ª—å"],
        "answer": "–ê–∫—Ç –≤—ñ–¥–º–æ–≤–∏ –Ω–∞–¥–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è"
    },
    # ... –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è ...
]

user_data = {}

def get_markup(options):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        markup.add(KeyboardButton(option))
    return markup

@dp.message(commands=["start"])
async def start_quiz(message: types.Message):
    user_id = message.from_user.id
    questions = SP_QUESTIONS.copy()
    random.shuffle(questions)
    user_data[user_id] = {"questions": questions, "current": 0, "message_id": None}

    msg = await message.answer(questions[0]["question"], reply_markup=get_markup(questions[0]["options"]))
    user_data[user_id]["message_id"] = msg.message_id

@dp.message()
async def handle_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")
        return

    current_index = user_data[user_id]["current"]
    question = user_data[user_id]["questions"][current_index]

    if message.text == question["answer"]:
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {question['answer']}")

    next_index = current_index + 1
    if next_index < len(user_data[user_id]["questions"]):
        msg = await message.answer(
            user_data[user_id]["questions"][next_index]["question"],
            reply_markup=get_markup(user_data[user_id]["questions"][next_index]["options"])
        )
        user_data[user_id]["current"] = next_index
        user_data[user_id]["message_id"] = msg.message_id
    else:
        await message.answer("üéâ –í–∏ –ø—Ä–æ–π—à–ª–∏ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è!", reply_markup=types.ReplyKeyboardRemove())
        user_data.pop(user_id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
