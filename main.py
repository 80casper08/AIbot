# main.py
import os
import random
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from questions import QUIZ_QUESTIONS, INTERVIEW_QUESTIONS

TOKEN = os.getenv("TOKEN")  # –¢–≤—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

user_state = {}  # —Ç—É—Ç –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –æ–¥—Ä–∞–∑—É —Ä–∞–Ω–¥–æ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"""
    chat_id = update.effective_chat.id
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç üëã –Ø –±–æ—Ç –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –∑ 5S —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏!\n\n"
        "–û–¥—Ä–∞–∑—É –ø–æ—á–Ω–µ–º–æ –∑ –ø–∏—Ç–∞–Ω–Ω—è:"
    )
    await send_random_question(chat_id, update, context)


async def send_random_question(chat_id, update, context, quiz=True):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä–∞–Ω–¥–æ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ QUIZ –∞–±–æ INTERVIEW"""
    questions_list = QUIZ_QUESTIONS if quiz else INTERVIEW_QUESTIONS
    question = random.choice(questions_list)
    user_state[chat_id] = question

    keyboard = [[opt] for opt in question["options"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    msg = await update.message.reply_text(question["question"], reply_markup=markup)
    user_state[chat_id]["message_id"] = msg.message_id


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    chat_id = update.effective_chat.id
    if chat_id not in user_state:
        return

    question = user_state[chat_id]
    answer = update.message.text

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–∏—Ç–∞–Ω–Ω—è
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=question["message_id"])
    except:
        pass  # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤, —ñ–≥–Ω–æ—Ä—É—î–º–æ

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if answer == question["answer"]:
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {question['answer']}", reply_markup=ReplyKeyboardRemove())

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
    await send_random_question(chat_id, update, context)


async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /quiz"""
    await send_random_question(update.effective_chat.id, update, context, quiz=True)

async def interview_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /interview"""
    await send_random_question(update.effective_chat.id, update, context, quiz=False)


if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä—é—î–º–æ Application
    application = Application.builder().token(TOKEN).build()

    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quiz", quiz_command))
    application.add_handler(CommandHandler("interview", interview_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç
    application.run_polling()
