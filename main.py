import asyncio
import random
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑ GitHub ---
GITHUB_URL = "https://raw.githubusercontent.com/—Ç–≤—ñ–π_—é–∑–µ—Ä/—Ç–≤—ñ–π_—Ä–µ–ø–æ/main/questions.py"

resp = requests.get(GITHUB_URL)
if resp.status_code == 200:
    exec(resp.text)  # —Ç–µ–ø–µ—Ä —É –Ω–∞—Å –±—É–¥–µ –∑–º—ñ–Ω–Ω–∞ questions —ñ–∑ —Ñ–∞–π–ª—É
else:
    raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ questions.py –∑ GitHub")

# --- –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω ---
user_data = {}

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏")]],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç:", reply_markup=keyboard)

@dp.message(F.text == "üöÄ –ü–æ—á–∞—Ç–∏")
async def start_quiz(message: types.Message):
    user_data[message.from_user.id] = {
        "question_index": 0,
        "selected_options": [],
        "temp_selected": set()
    }
    await send_question(message.from_user.id, message)

# --- –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è ---
async def send_question(user_id, message_or_callback):
    data = user_data[user_id]
    index = data["question_index"]

    if index >= len(questions):
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        correct = 0
        for i, q in enumerate(questions):
            correct_answers = {j for j, (_, is_correct) in enumerate(q["options"]) if is_correct}
            user_selected = set(data["selected_options"][i])
            if correct_answers == user_selected:
                correct += 1
        await message_or_callback.answer(f"üìä –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct}/{len(questions)}")
        del user_data[user_id]
        return

    # –ü–∏—Ç–∞–Ω–Ω—è
    q = questions[index]
    opts = list(enumerate(q["options"]))
    random.shuffle(opts)
    selected = data.get("temp_selected", set())
    buttons = [[InlineKeyboardButton(text=("‚úÖ " if i in selected else "‚óªÔ∏è ") + label, callback_data=f"opt_{i}")] for i, (label, _) in opts]
    buttons.append([InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(q["text"], reply_markup=keyboard)
    else:
        await message_or_callback.answer(q["text"], reply_markup=keyboard)

# --- –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É ---
@dp.callback_query(F.data.startswith("opt_"))
async def toggle_option(callback: CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[1])
    data = user_data[user_id]
    selected = data.get("temp_selected", set())
    selected.symmetric_difference_update({index})
    data["temp_selected"] = selected
    await send_question(user_id, callback)

@dp.callback_query(F.data == "confirm")
async def confirm_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = user_data[user_id]
    selected = data.get("temp_selected", set())
    data["selected_options"].append(list(selected))
    data["question_index"] += 1
    data["temp_selected"] = set()
    await send_question(user_id, callback)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
