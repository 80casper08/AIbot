import os
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from questions import QUIZ_QUESTIONS, INTERVIEW_QUESTIONS

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

user_state = {}

def get_random_question():
    return random.choice(QUIZ_QUESTIONS + INTERVIEW_QUESTIONS)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç üëã –Ø –±–æ—Ç –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –∑ 5S —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏!\n"
        "–ù–∏–∂—á–µ –æ–¥–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:"
    )
    question = get_random_question()
    user_state[update.effective_chat.id] = question
    keyboard = [[opt] for opt in question["options"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  # –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø–æ—Å—Ç—ñ–π–Ω–∞
    await update.message.reply_text(question["question"], reply_markup=markup)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in user_state:
        return

    question = user_state[chat_id]
    answer = update.message.text

    if answer == question["answer"]:
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {question['answer']}")

    # –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
    next_question = get_random_question()
    user_state[chat_id] = next_question
    keyboard = [[opt] for opt in next_question["options"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(next_question["question"], reply_markup=markup)

if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    print("Bot is running...")
    application.run_polling()
