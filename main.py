import os
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render")

QUIZ_QUESTIONS = [
    {"question": "–Ø–∫–æ–≥–æ –∫–æ–ª—å–æ—Ä—É —Ç–µ–ø–µ—Ä –±—É–¥–µ —Å—Ç—Ä—ñ—á–∫–∞ –¥–ª—è —Ä–æ–∑–º—ñ—Ç–∫–∏ –ø—ñ–¥–ª–æ–≥–∏?",
     "options": ["üü® –ñ–æ–≤—Ç–∞", "üüß –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∞", "üü© –ó–µ–ª–µ–Ω–∞"],
     "answer": "üüß –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∞"},
    {"question": "–î–µ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∂–æ–≤—Ç–∞ —Å—Ç—Ä—ñ—á–∫–∞?",
     "options": ["–ù–∞ —Å–∫–ª–∞–¥—ñ", "–ù–∞ —Ä–æ–±–æ—á–∏—Ö –º—ñ—Å—Ü—è—Ö", "–£ –∫–æ—Ä–∏–¥–æ—Ä–∞—Ö"],
     "answer": "–ù–∞ —Ä–æ–±–æ—á–∏—Ö –º—ñ—Å—Ü—è—Ö"}
]

INTERVIEW_QUESTIONS = [
    {"question": "–©–æ —Ç–∞–∫–µ 5S?",
     "options": ["–ú–µ—Ç–æ–¥ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ä–æ–±–æ—á–æ–≥–æ –º—ñ—Å—Ü—è", "–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç–∏ –ø—Ä–∞—Ü—ñ", "–í–∏–¥ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"],
     "answer": "–ú–µ—Ç–æ–¥ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ä–æ–±–æ—á–æ–≥–æ –º—ñ—Å—Ü—è"},
    {"question": "–©–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –ø–ª–∞–Ω –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è?",
     "options": ["–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏", "–ó—ñ–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞ —à—É–∫–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è", "–ü–æ–∫–∞—Ä–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤"],
     "answer": "–ó—ñ–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞ —à—É–∫–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è"}
]

user_state = {}

def get_random_question():
    return random.choice(QUIZ_QUESTIONS + INTERVIEW_QUESTIONS)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç üëã –Ø –±–æ—Ç –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –∑ 5S —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏!\n"
        "–ù–∏–∂—á–µ –æ–¥–Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:"
    )
    question = get_random_question()
    user_state[update.effective_chat.id] = question
    keyboard = [[opt] for opt in question["options"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  # –≤–∏–¥–∞–ª–∏–ª–∏ one_time_keyboard
    await update.message.reply_text(question["question"], reply_markup=markup)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in user_state:
        return
    question = user_state[chat_id]
    answer = update.message.text

    if answer == question["answer"]:
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {question['answer']}")

    # –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
    next_question = get_random_question()
    user_state[chat_id] = next_question
    keyboard = [[opt] for opt in next_question["options"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)  # –ø–æ—Å—Ç—ñ–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    await update.message.reply_text(next_question["question"], reply_markup=markup)

if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    print("Bot is running...")
    application.run_polling()
